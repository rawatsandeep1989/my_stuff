ErrOrs in python can be of two types : 
a. syntax 
b. errors which are encountered at runtime(exceptions)




e.g of syntax error :
a. indentation not done properly


e.g of exceptions :


e.g of exceptions : 
Exceptions occur during run-time.Python encounters something which it can't handle, then it raises an exception.
For example, dividing a number by zero or trying to write to a file which is read-only.


Exception Class 	Event
Exception 	Base class for all exceptions
ArithmeticError 	Raised when numeric calculations fails
FloatingPointError 	Raised when a floating point calculation fails
ZeroDivisionError 	Raised when division or modulo by zero takes place for all numeric types
AssertionError 	Raised when Assert statement fails
OverflowError 	Raised when result of an arithmetic operation is too large to be represented
ImportError 	Raised when the imported module is not found
IndexError 	Raised when index of a sequence is out of range
KeyboardInterrupt 	Raised when the user interrupts program execution, generally by pressing Ctrl+c
IndentationError 	Raised when there is incorrect indentation
SyntaxError 	Raised by parser when syntax error is encountered
KeyError 	Raised when the specified key is not found in the dictionary
NameError 	Raised when an identifier is not found in the local or global namespace
TypeError 	Raised when a function or operation is applied to an object of incorrect type
ValueError 	Raised when a function gets argument of correct type but improper value
IOError 	Raised when an input/ output operation fails
RuntimeError 	Raised when a generated error does not fall into any category





handling an exception in python : 
try and catch block are used for this purpose,
try with finally clause.





Python Custom Exceptions

Python has many built-in exceptions which you can use in your program, but sometimes you may need to create custom exceptions with custom messages to serve your purpose.

You can do so by creating a new class, which will be derived from the pre-defined Exception class in Python.
Here is an example of writing custom Exception class.

class UnAcceptedValueError(Exception):   
    def __init__(self, data):    
        self.data = data
    def __str__(self):
        return repr(self.data)

Total_Marks = int(input("Enter Total Marks Scored: "))
try:
    Num_of_Sections = int(input("Enter Num of Sections: "))
    if(Num_of_Sections < 1):
        raise UnAcceptedValueError("Number of Sections can't be less than 1")
except UnAcceptedValueError as e:
    print ("Received error:", e.data)

Enter Total Marks Scored: 10
Enter Num of Sections: 0
